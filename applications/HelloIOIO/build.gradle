apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 30
    defaultConfig {

        gradle.startParameter.taskNames.each {
            if (it.contains("AndroidTest") || it.contains("cAT")) {
                minSdkVersion 21
            } else {
                minSdkVersion 14
            }
        }

        targetSdkVersion 30

        versionCode getGitCommitCount()
        versionName getTag()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "integration"
    productFlavors {
        code {
            dimension "integration"
        }
        library {
            dimension "integration"
        }
    }

}

dependencies {
    codeImplementation project(':IOIOLibAndroidBluetooth')
    codeImplementation project(':IOIOLibAndroidAccessory')
    codeImplementation project(':IOIOLibAndroidDevice')

    def ioioVersion = "6.0.0-beta4"
    libraryImplementation "com.github.ytai.ioio:IOIOLibAndroidBluetooth:$ioioVersion"
    libraryImplementation "com.github.ytai.ioio:IOIOLibAndroidAccessory:$ioioVersion"
    libraryImplementation "com.github.ytai.ioio:IOIOLibAndroidDevice:$ioioVersion"

    androidTestImplementation 'com.github.AppDevNext:Moka:0.4'
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'
}

def adbDirectory = '/storage/emulated/0/Download' // api 28
//def adbDirectory = '/storage/self/primary/Download' // api 21
def reportsDirectory = "$projectDir/../screenshots/adb"

def clearScreenshotsTask = task('clearScreenshots', type: Exec) {
    println "clearScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'rm', '-r', adbDirectory
}

def createScreenshotDirectoryTask = task('createScreenshotDirectory', type: Exec, group: 'reporting') {
    println "createScreenshotDirectoryTask"
    executable "${android.getAdbExe().toString()}"
    args 'shell', 'mkdir', '-p', adbDirectory
}

def fetchScreenshotsTask = task('fetchScreenshots', type: Exec, group: 'reporting') {
    println "fetchScreenshotsTask"
    executable "${android.getAdbExe().toString()}"
    args 'pull', adbDirectory + '/.', reportsDirectory

    dependsOn {
        createScreenshotDirectoryTask
    }

    doFirst {
        new File(reportsDirectory).mkdirs()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'connectedDebugAndroidTest' || task.name == 'connectedCodeDebugAndroidTest') {
        task.mustRunAfter {
            clearScreenshotsTask
            createScreenshotDirectoryTask
        }
        task.finalizedBy {
            fetchScreenshotsTask
        }
    }
}